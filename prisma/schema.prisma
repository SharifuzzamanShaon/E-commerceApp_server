// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
model User {
  id            String   @id @default(uuid())
  name          String
  email         String   @unique
  password      String
  role          UserRole @default(USER)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  orders        Order[]
  reviews       Review[]
  cart          Cart?
  addresses     Address[]
  payments      Payment[]
}

enum UserRole {
  USER
  ADMIN
}

model Product {
  id          String   @id @default(uuid())
  name        String
  description String
  price       Decimal
  stock       Int
  imageUrl    String?
  subSubCategoryId String
  subSubCategory SubSubCategory? @relation(fields: [subSubCategoryId], references: [id])
  subCategoryId String
  subCategory SubCategroy? @relation(fields: [subCategoryId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  color       Color[]
  size        Size[]
  reviews     Review[]
  orderItems  OrderItem[]
  CartItem CartItem[]
  
}
enum Color {
  RED
  GREEN
  BLUE
  YELLOW
  ORANGE
  PURPLE
  PINK
  BLACK
  WHITE
  GRAY
}
enum Size {
  XS
  S
  M
  L
  XL
  XXL
}
model Category {
  id        String    @id @default(uuid())
  name      String    @unique
  subCategories SubCategroy[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}
model SubCategroy{
  id        String    @id @default(uuid())
  name      String    @unique
  parentCategory String
  Category  Category  @relation(fields: [parentCategory], references: [id])
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  SubSubCategory SubSubCategory[]

}
model SubSubCategory {
  id        String    @id @default(uuid())
  name String @unique
  parentCategory String
  SubCategroy  SubCategroy  @relation(fields: [parentCategory], references: [id])
  products Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Order {
  id        String     @id @default(uuid())
  userId    String
  user      User       @relation(fields: [userId], references: [id])
  total     Decimal
  status    OrderStatus @default(PENDING)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  orderItems OrderItem[]
  payment   Payment?
  address   Address[]
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELED
}

model OrderItem {
  id        String   @id @default(uuid())
  orderId   String
  order     Order    @relation(fields: [orderId], references: [id])
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  quantity  Int
  price     Decimal
}

model Review {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Cart {
  id       String    @id @default(uuid())
  userId   String    @unique
  user     User      @relation(fields: [userId], references: [id])
  items    CartItem[]
}

model CartItem {
  id        String   @id @default(uuid())
  cartId    String
  cart      Cart     @relation(fields: [cartId], references: [id])
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  quantity  Int
}

model Payment {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  orderId   String   @unique
  order     Order    @relation(fields: [orderId], references: [id])
  amount    Decimal
  status    PaymentStatus @default(PENDING)
  createdAt DateTime @default(now())
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
}

model Address {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  street    String
  city      String
  state     String
  zipCode   String
  country   String

  Order Order[]
}
